//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EverProV2.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EverisProduccionEntities : DbContext
    {
        public EverisProduccionEntities()
            : base("name=EverisProduccionEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        [DbFunction("EverisProduccionEntities", "Split")]
        public virtual IQueryable<Split_Result> Split(string @string, string delimiter)
        {
            var stringParameter = @string != null ?
                new ObjectParameter("String", @string) :
                new ObjectParameter("String", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("delimiter", delimiter) :
                new ObjectParameter("delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Split_Result>("[EverisProduccionEntities].[Split](@String, @delimiter)", stringParameter, delimiterParameter);
        }
    
        public virtual ObjectResult<string> aspnet_AnyDataInTables(Nullable<int> tablesToCheck)
        {
            var tablesToCheckParameter = tablesToCheck.HasValue ?
                new ObjectParameter("TablesToCheck", tablesToCheck) :
                new ObjectParameter("TablesToCheck", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_AnyDataInTables", tablesToCheckParameter);
        }
    
        public virtual int aspnet_Applications_CreateApplication(string applicationName, ObjectParameter applicationId)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Applications_CreateApplication", applicationNameParameter, applicationId);
        }
    
        public virtual int aspnet_CheckSchemaVersion(string feature, string compatibleSchemaVersion)
        {
            var featureParameter = feature != null ?
                new ObjectParameter("Feature", feature) :
                new ObjectParameter("Feature", typeof(string));
    
            var compatibleSchemaVersionParameter = compatibleSchemaVersion != null ?
                new ObjectParameter("CompatibleSchemaVersion", compatibleSchemaVersion) :
                new ObjectParameter("CompatibleSchemaVersion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_CheckSchemaVersion", featureParameter, compatibleSchemaVersionParameter);
        }
    
        public virtual int aspnet_Membership_ChangePasswordQuestionAndAnswer(string applicationName, string userName, string newPasswordQuestion, string newPasswordAnswer)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var newPasswordQuestionParameter = newPasswordQuestion != null ?
                new ObjectParameter("NewPasswordQuestion", newPasswordQuestion) :
                new ObjectParameter("NewPasswordQuestion", typeof(string));
    
            var newPasswordAnswerParameter = newPasswordAnswer != null ?
                new ObjectParameter("NewPasswordAnswer", newPasswordAnswer) :
                new ObjectParameter("NewPasswordAnswer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_ChangePasswordQuestionAndAnswer", applicationNameParameter, userNameParameter, newPasswordQuestionParameter, newPasswordAnswerParameter);
        }
    
        public virtual int aspnet_Membership_CreateUser(string applicationName, string userName, string password, string passwordSalt, string email, string passwordQuestion, string passwordAnswer, Nullable<bool> isApproved, Nullable<System.DateTime> currentTimeUtc, Nullable<System.DateTime> createDate, Nullable<int> uniqueEmail, Nullable<int> passwordFormat, ObjectParameter userId)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordQuestionParameter = passwordQuestion != null ?
                new ObjectParameter("PasswordQuestion", passwordQuestion) :
                new ObjectParameter("PasswordQuestion", typeof(string));
    
            var passwordAnswerParameter = passwordAnswer != null ?
                new ObjectParameter("PasswordAnswer", passwordAnswer) :
                new ObjectParameter("PasswordAnswer", typeof(string));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var uniqueEmailParameter = uniqueEmail.HasValue ?
                new ObjectParameter("UniqueEmail", uniqueEmail) :
                new ObjectParameter("UniqueEmail", typeof(int));
    
            var passwordFormatParameter = passwordFormat.HasValue ?
                new ObjectParameter("PasswordFormat", passwordFormat) :
                new ObjectParameter("PasswordFormat", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_CreateUser", applicationNameParameter, userNameParameter, passwordParameter, passwordSaltParameter, emailParameter, passwordQuestionParameter, passwordAnswerParameter, isApprovedParameter, currentTimeUtcParameter, createDateParameter, uniqueEmailParameter, passwordFormatParameter, userId);
        }
    
        public virtual int aspnet_Membership_FindUsersByEmail(string applicationName, string emailToMatch, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var emailToMatchParameter = emailToMatch != null ?
                new ObjectParameter("EmailToMatch", emailToMatch) :
                new ObjectParameter("EmailToMatch", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_FindUsersByEmail", applicationNameParameter, emailToMatchParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int aspnet_Membership_FindUsersByName(string applicationName, string userNameToMatch, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameToMatchParameter = userNameToMatch != null ?
                new ObjectParameter("UserNameToMatch", userNameToMatch) :
                new ObjectParameter("UserNameToMatch", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_FindUsersByName", applicationNameParameter, userNameToMatchParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int aspnet_Membership_GetAllUsers(string applicationName, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_GetAllUsers", applicationNameParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int aspnet_Membership_GetNumberOfUsersOnline(string applicationName, Nullable<int> minutesSinceLastInActive, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var minutesSinceLastInActiveParameter = minutesSinceLastInActive.HasValue ?
                new ObjectParameter("MinutesSinceLastInActive", minutesSinceLastInActive) :
                new ObjectParameter("MinutesSinceLastInActive", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_GetNumberOfUsersOnline", applicationNameParameter, minutesSinceLastInActiveParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<aspnet_Membership_GetPassword_Result> aspnet_Membership_GetPassword(string applicationName, string userName, Nullable<int> maxInvalidPasswordAttempts, Nullable<int> passwordAttemptWindow, Nullable<System.DateTime> currentTimeUtc, string passwordAnswer)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var maxInvalidPasswordAttemptsParameter = maxInvalidPasswordAttempts.HasValue ?
                new ObjectParameter("MaxInvalidPasswordAttempts", maxInvalidPasswordAttempts) :
                new ObjectParameter("MaxInvalidPasswordAttempts", typeof(int));
    
            var passwordAttemptWindowParameter = passwordAttemptWindow.HasValue ?
                new ObjectParameter("PasswordAttemptWindow", passwordAttemptWindow) :
                new ObjectParameter("PasswordAttemptWindow", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var passwordAnswerParameter = passwordAnswer != null ?
                new ObjectParameter("PasswordAnswer", passwordAnswer) :
                new ObjectParameter("PasswordAnswer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetPassword_Result>("aspnet_Membership_GetPassword", applicationNameParameter, userNameParameter, maxInvalidPasswordAttemptsParameter, passwordAttemptWindowParameter, currentTimeUtcParameter, passwordAnswerParameter);
        }
    
        public virtual ObjectResult<aspnet_Membership_GetPasswordWithFormat_Result> aspnet_Membership_GetPasswordWithFormat(string applicationName, string userName, Nullable<bool> updateLastLoginActivityDate, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var updateLastLoginActivityDateParameter = updateLastLoginActivityDate.HasValue ?
                new ObjectParameter("UpdateLastLoginActivityDate", updateLastLoginActivityDate) :
                new ObjectParameter("UpdateLastLoginActivityDate", typeof(bool));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetPasswordWithFormat_Result>("aspnet_Membership_GetPasswordWithFormat", applicationNameParameter, userNameParameter, updateLastLoginActivityDateParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<string> aspnet_Membership_GetUserByEmail(string applicationName, string email)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_Membership_GetUserByEmail", applicationNameParameter, emailParameter);
        }
    
        public virtual ObjectResult<aspnet_Membership_GetUserByName_Result> aspnet_Membership_GetUserByName(string applicationName, string userName, Nullable<System.DateTime> currentTimeUtc, Nullable<bool> updateLastActivity)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var updateLastActivityParameter = updateLastActivity.HasValue ?
                new ObjectParameter("UpdateLastActivity", updateLastActivity) :
                new ObjectParameter("UpdateLastActivity", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetUserByName_Result>("aspnet_Membership_GetUserByName", applicationNameParameter, userNameParameter, currentTimeUtcParameter, updateLastActivityParameter);
        }
    
        public virtual ObjectResult<aspnet_Membership_GetUserByUserId_Result> aspnet_Membership_GetUserByUserId(Nullable<System.Guid> userId, Nullable<System.DateTime> currentTimeUtc, Nullable<bool> updateLastActivity)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var updateLastActivityParameter = updateLastActivity.HasValue ?
                new ObjectParameter("UpdateLastActivity", updateLastActivity) :
                new ObjectParameter("UpdateLastActivity", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetUserByUserId_Result>("aspnet_Membership_GetUserByUserId", userIdParameter, currentTimeUtcParameter, updateLastActivityParameter);
        }
    
        public virtual int aspnet_Membership_ResetPassword(string applicationName, string userName, string newPassword, Nullable<int> maxInvalidPasswordAttempts, Nullable<int> passwordAttemptWindow, string passwordSalt, Nullable<System.DateTime> currentTimeUtc, Nullable<int> passwordFormat, string passwordAnswer)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            var maxInvalidPasswordAttemptsParameter = maxInvalidPasswordAttempts.HasValue ?
                new ObjectParameter("MaxInvalidPasswordAttempts", maxInvalidPasswordAttempts) :
                new ObjectParameter("MaxInvalidPasswordAttempts", typeof(int));
    
            var passwordAttemptWindowParameter = passwordAttemptWindow.HasValue ?
                new ObjectParameter("PasswordAttemptWindow", passwordAttemptWindow) :
                new ObjectParameter("PasswordAttemptWindow", typeof(int));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var passwordFormatParameter = passwordFormat.HasValue ?
                new ObjectParameter("PasswordFormat", passwordFormat) :
                new ObjectParameter("PasswordFormat", typeof(int));
    
            var passwordAnswerParameter = passwordAnswer != null ?
                new ObjectParameter("PasswordAnswer", passwordAnswer) :
                new ObjectParameter("PasswordAnswer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_ResetPassword", applicationNameParameter, userNameParameter, newPasswordParameter, maxInvalidPasswordAttemptsParameter, passwordAttemptWindowParameter, passwordSaltParameter, currentTimeUtcParameter, passwordFormatParameter, passwordAnswerParameter);
        }
    
        public virtual int aspnet_Membership_SetPassword(string applicationName, string userName, string newPassword, string passwordSalt, Nullable<System.DateTime> currentTimeUtc, Nullable<int> passwordFormat)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var passwordFormatParameter = passwordFormat.HasValue ?
                new ObjectParameter("PasswordFormat", passwordFormat) :
                new ObjectParameter("PasswordFormat", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_SetPassword", applicationNameParameter, userNameParameter, newPasswordParameter, passwordSaltParameter, currentTimeUtcParameter, passwordFormatParameter);
        }
    
        public virtual int aspnet_Membership_UnlockUser(string applicationName, string userName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_UnlockUser", applicationNameParameter, userNameParameter);
        }
    
        public virtual int aspnet_Membership_UpdateUser(string applicationName, string userName, string email, string comment, Nullable<bool> isApproved, Nullable<System.DateTime> lastLoginDate, Nullable<System.DateTime> lastActivityDate, Nullable<int> uniqueEmail, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var lastLoginDateParameter = lastLoginDate.HasValue ?
                new ObjectParameter("LastLoginDate", lastLoginDate) :
                new ObjectParameter("LastLoginDate", typeof(System.DateTime));
    
            var lastActivityDateParameter = lastActivityDate.HasValue ?
                new ObjectParameter("LastActivityDate", lastActivityDate) :
                new ObjectParameter("LastActivityDate", typeof(System.DateTime));
    
            var uniqueEmailParameter = uniqueEmail.HasValue ?
                new ObjectParameter("UniqueEmail", uniqueEmail) :
                new ObjectParameter("UniqueEmail", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_UpdateUser", applicationNameParameter, userNameParameter, emailParameter, commentParameter, isApprovedParameter, lastLoginDateParameter, lastActivityDateParameter, uniqueEmailParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_Membership_UpdateUserInfo(string applicationName, string userName, Nullable<bool> isPasswordCorrect, Nullable<bool> updateLastLoginActivityDate, Nullable<int> maxInvalidPasswordAttempts, Nullable<int> passwordAttemptWindow, Nullable<System.DateTime> currentTimeUtc, Nullable<System.DateTime> lastLoginDate, Nullable<System.DateTime> lastActivityDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var isPasswordCorrectParameter = isPasswordCorrect.HasValue ?
                new ObjectParameter("IsPasswordCorrect", isPasswordCorrect) :
                new ObjectParameter("IsPasswordCorrect", typeof(bool));
    
            var updateLastLoginActivityDateParameter = updateLastLoginActivityDate.HasValue ?
                new ObjectParameter("UpdateLastLoginActivityDate", updateLastLoginActivityDate) :
                new ObjectParameter("UpdateLastLoginActivityDate", typeof(bool));
    
            var maxInvalidPasswordAttemptsParameter = maxInvalidPasswordAttempts.HasValue ?
                new ObjectParameter("MaxInvalidPasswordAttempts", maxInvalidPasswordAttempts) :
                new ObjectParameter("MaxInvalidPasswordAttempts", typeof(int));
    
            var passwordAttemptWindowParameter = passwordAttemptWindow.HasValue ?
                new ObjectParameter("PasswordAttemptWindow", passwordAttemptWindow) :
                new ObjectParameter("PasswordAttemptWindow", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var lastLoginDateParameter = lastLoginDate.HasValue ?
                new ObjectParameter("LastLoginDate", lastLoginDate) :
                new ObjectParameter("LastLoginDate", typeof(System.DateTime));
    
            var lastActivityDateParameter = lastActivityDate.HasValue ?
                new ObjectParameter("LastActivityDate", lastActivityDate) :
                new ObjectParameter("LastActivityDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_UpdateUserInfo", applicationNameParameter, userNameParameter, isPasswordCorrectParameter, updateLastLoginActivityDateParameter, maxInvalidPasswordAttemptsParameter, passwordAttemptWindowParameter, currentTimeUtcParameter, lastLoginDateParameter, lastActivityDateParameter);
        }
    
        public virtual ObjectResult<aspnet_Membership_ValidMobilePIN_Result> aspnet_Membership_ValidMobilePIN(string nameUser, string pin)
        {
            var nameUserParameter = nameUser != null ?
                new ObjectParameter("NameUser", nameUser) :
                new ObjectParameter("NameUser", typeof(string));
    
            var pinParameter = pin != null ?
                new ObjectParameter("Pin", pin) :
                new ObjectParameter("Pin", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_ValidMobilePIN_Result>("aspnet_Membership_ValidMobilePIN", nameUserParameter, pinParameter);
        }
    
        public virtual int aspnet_Paths_CreatePath(Nullable<System.Guid> applicationId, string path, ObjectParameter pathId)
        {
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(System.Guid));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Paths_CreatePath", applicationIdParameter, pathParameter, pathId);
        }
    
        public virtual int aspnet_Personalization_GetApplicationId(string applicationName, ObjectParameter applicationId)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Personalization_GetApplicationId", applicationNameParameter, applicationId);
        }
    
        public virtual int aspnet_PersonalizationAdministration_DeleteAllState(Nullable<bool> allUsersScope, string applicationName, ObjectParameter count)
        {
            var allUsersScopeParameter = allUsersScope.HasValue ?
                new ObjectParameter("AllUsersScope", allUsersScope) :
                new ObjectParameter("AllUsersScope", typeof(bool));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_DeleteAllState", allUsersScopeParameter, applicationNameParameter, count);
        }
    
        public virtual int aspnet_PersonalizationAdministration_FindState(Nullable<bool> allUsersScope, string applicationName, Nullable<int> pageIndex, Nullable<int> pageSize, string path, string userName, Nullable<System.DateTime> inactiveSinceDate)
        {
            var allUsersScopeParameter = allUsersScope.HasValue ?
                new ObjectParameter("AllUsersScope", allUsersScope) :
                new ObjectParameter("AllUsersScope", typeof(bool));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_FindState", allUsersScopeParameter, applicationNameParameter, pageIndexParameter, pageSizeParameter, pathParameter, userNameParameter, inactiveSinceDateParameter);
        }
    
        public virtual int aspnet_PersonalizationAdministration_GetCountOfState(ObjectParameter count, Nullable<bool> allUsersScope, string applicationName, string path, string userName, Nullable<System.DateTime> inactiveSinceDate)
        {
            var allUsersScopeParameter = allUsersScope.HasValue ?
                new ObjectParameter("AllUsersScope", allUsersScope) :
                new ObjectParameter("AllUsersScope", typeof(bool));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_GetCountOfState", count, allUsersScopeParameter, applicationNameParameter, pathParameter, userNameParameter, inactiveSinceDateParameter);
        }
    
        public virtual int aspnet_PersonalizationAdministration_ResetSharedState(ObjectParameter count, string applicationName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_ResetSharedState", count, applicationNameParameter, pathParameter);
        }
    
        public virtual int aspnet_PersonalizationAdministration_ResetUserState(ObjectParameter count, string applicationName, Nullable<System.DateTime> inactiveSinceDate, string userName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_ResetUserState", count, applicationNameParameter, inactiveSinceDateParameter, userNameParameter, pathParameter);
        }
    
        public virtual ObjectResult<byte[]> aspnet_PersonalizationAllUsers_GetPageSettings(string applicationName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<byte[]>("aspnet_PersonalizationAllUsers_GetPageSettings", applicationNameParameter, pathParameter);
        }
    
        public virtual int aspnet_PersonalizationAllUsers_ResetPageSettings(string applicationName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAllUsers_ResetPageSettings", applicationNameParameter, pathParameter);
        }
    
        public virtual int aspnet_PersonalizationAllUsers_SetPageSettings(string applicationName, string path, byte[] pageSettings, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var pageSettingsParameter = pageSettings != null ?
                new ObjectParameter("PageSettings", pageSettings) :
                new ObjectParameter("PageSettings", typeof(byte[]));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAllUsers_SetPageSettings", applicationNameParameter, pathParameter, pageSettingsParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<byte[]> aspnet_PersonalizationPerUser_GetPageSettings(string applicationName, string userName, string path, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<byte[]>("aspnet_PersonalizationPerUser_GetPageSettings", applicationNameParameter, userNameParameter, pathParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_PersonalizationPerUser_ResetPageSettings(string applicationName, string userName, string path, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationPerUser_ResetPageSettings", applicationNameParameter, userNameParameter, pathParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_PersonalizationPerUser_SetPageSettings(string applicationName, string userName, string path, byte[] pageSettings, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var pageSettingsParameter = pageSettings != null ?
                new ObjectParameter("PageSettings", pageSettings) :
                new ObjectParameter("PageSettings", typeof(byte[]));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationPerUser_SetPageSettings", applicationNameParameter, userNameParameter, pathParameter, pageSettingsParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> aspnet_Profile_DeleteInactiveProfiles(string applicationName, Nullable<int> profileAuthOptions, Nullable<System.DateTime> inactiveSinceDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var profileAuthOptionsParameter = profileAuthOptions.HasValue ?
                new ObjectParameter("ProfileAuthOptions", profileAuthOptions) :
                new ObjectParameter("ProfileAuthOptions", typeof(int));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("aspnet_Profile_DeleteInactiveProfiles", applicationNameParameter, profileAuthOptionsParameter, inactiveSinceDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> aspnet_Profile_DeleteProfiles(string applicationName, string userNames)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNamesParameter = userNames != null ?
                new ObjectParameter("UserNames", userNames) :
                new ObjectParameter("UserNames", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("aspnet_Profile_DeleteProfiles", applicationNameParameter, userNamesParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> aspnet_Profile_GetNumberOfInactiveProfiles(string applicationName, Nullable<int> profileAuthOptions, Nullable<System.DateTime> inactiveSinceDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var profileAuthOptionsParameter = profileAuthOptions.HasValue ?
                new ObjectParameter("ProfileAuthOptions", profileAuthOptions) :
                new ObjectParameter("ProfileAuthOptions", typeof(int));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("aspnet_Profile_GetNumberOfInactiveProfiles", applicationNameParameter, profileAuthOptionsParameter, inactiveSinceDateParameter);
        }
    
        public virtual int aspnet_Profile_GetProfiles(string applicationName, Nullable<int> profileAuthOptions, Nullable<int> pageIndex, Nullable<int> pageSize, string userNameToMatch, Nullable<System.DateTime> inactiveSinceDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var profileAuthOptionsParameter = profileAuthOptions.HasValue ?
                new ObjectParameter("ProfileAuthOptions", profileAuthOptions) :
                new ObjectParameter("ProfileAuthOptions", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var userNameToMatchParameter = userNameToMatch != null ?
                new ObjectParameter("UserNameToMatch", userNameToMatch) :
                new ObjectParameter("UserNameToMatch", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Profile_GetProfiles", applicationNameParameter, profileAuthOptionsParameter, pageIndexParameter, pageSizeParameter, userNameToMatchParameter, inactiveSinceDateParameter);
        }
    
        public virtual ObjectResult<aspnet_Profile_GetProperties_Result> aspnet_Profile_GetProperties(string applicationName, string userName, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Profile_GetProperties_Result>("aspnet_Profile_GetProperties", applicationNameParameter, userNameParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_Profile_SetProperties(string applicationName, string propertyNames, string propertyValuesString, byte[] propertyValuesBinary, string userName, Nullable<bool> isUserAnonymous, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var propertyNamesParameter = propertyNames != null ?
                new ObjectParameter("PropertyNames", propertyNames) :
                new ObjectParameter("PropertyNames", typeof(string));
    
            var propertyValuesStringParameter = propertyValuesString != null ?
                new ObjectParameter("PropertyValuesString", propertyValuesString) :
                new ObjectParameter("PropertyValuesString", typeof(string));
    
            var propertyValuesBinaryParameter = propertyValuesBinary != null ?
                new ObjectParameter("PropertyValuesBinary", propertyValuesBinary) :
                new ObjectParameter("PropertyValuesBinary", typeof(byte[]));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var isUserAnonymousParameter = isUserAnonymous.HasValue ?
                new ObjectParameter("IsUserAnonymous", isUserAnonymous) :
                new ObjectParameter("IsUserAnonymous", typeof(bool));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Profile_SetProperties", applicationNameParameter, propertyNamesParameter, propertyValuesStringParameter, propertyValuesBinaryParameter, userNameParameter, isUserAnonymousParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_RegisterSchemaVersion(string feature, string compatibleSchemaVersion, Nullable<bool> isCurrentVersion, Nullable<bool> removeIncompatibleSchema)
        {
            var featureParameter = feature != null ?
                new ObjectParameter("Feature", feature) :
                new ObjectParameter("Feature", typeof(string));
    
            var compatibleSchemaVersionParameter = compatibleSchemaVersion != null ?
                new ObjectParameter("CompatibleSchemaVersion", compatibleSchemaVersion) :
                new ObjectParameter("CompatibleSchemaVersion", typeof(string));
    
            var isCurrentVersionParameter = isCurrentVersion.HasValue ?
                new ObjectParameter("IsCurrentVersion", isCurrentVersion) :
                new ObjectParameter("IsCurrentVersion", typeof(bool));
    
            var removeIncompatibleSchemaParameter = removeIncompatibleSchema.HasValue ?
                new ObjectParameter("RemoveIncompatibleSchema", removeIncompatibleSchema) :
                new ObjectParameter("RemoveIncompatibleSchema", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_RegisterSchemaVersion", featureParameter, compatibleSchemaVersionParameter, isCurrentVersionParameter, removeIncompatibleSchemaParameter);
        }
    
        public virtual int aspnet_Roles_CreateRole(string applicationName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Roles_CreateRole", applicationNameParameter, roleNameParameter);
        }
    
        public virtual int aspnet_Roles_DeleteRole(string applicationName, string roleName, Nullable<bool> deleteOnlyIfRoleIsEmpty)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var deleteOnlyIfRoleIsEmptyParameter = deleteOnlyIfRoleIsEmpty.HasValue ?
                new ObjectParameter("DeleteOnlyIfRoleIsEmpty", deleteOnlyIfRoleIsEmpty) :
                new ObjectParameter("DeleteOnlyIfRoleIsEmpty", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Roles_DeleteRole", applicationNameParameter, roleNameParameter, deleteOnlyIfRoleIsEmptyParameter);
        }
    
        public virtual ObjectResult<string> aspnet_Roles_GetAllRoles(string applicationName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_Roles_GetAllRoles", applicationNameParameter);
        }
    
        public virtual int aspnet_Roles_RoleExists(string applicationName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Roles_RoleExists", applicationNameParameter, roleNameParameter);
        }
    
        public virtual int aspnet_Setup_RemoveAllRoleMembers(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Setup_RemoveAllRoleMembers", nameParameter);
        }
    
        public virtual int aspnet_Setup_RestorePermissions(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Setup_RestorePermissions", nameParameter);
        }
    
        public virtual int aspnet_UnRegisterSchemaVersion(string feature, string compatibleSchemaVersion)
        {
            var featureParameter = feature != null ?
                new ObjectParameter("Feature", feature) :
                new ObjectParameter("Feature", typeof(string));
    
            var compatibleSchemaVersionParameter = compatibleSchemaVersion != null ?
                new ObjectParameter("CompatibleSchemaVersion", compatibleSchemaVersion) :
                new ObjectParameter("CompatibleSchemaVersion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_UnRegisterSchemaVersion", featureParameter, compatibleSchemaVersionParameter);
        }
    
        public virtual int aspnet_Users_CreateUser(Nullable<System.Guid> applicationId, string userName, Nullable<bool> isUserAnonymous, Nullable<System.DateTime> lastActivityDate, ObjectParameter userId)
        {
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(System.Guid));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var isUserAnonymousParameter = isUserAnonymous.HasValue ?
                new ObjectParameter("IsUserAnonymous", isUserAnonymous) :
                new ObjectParameter("IsUserAnonymous", typeof(bool));
    
            var lastActivityDateParameter = lastActivityDate.HasValue ?
                new ObjectParameter("LastActivityDate", lastActivityDate) :
                new ObjectParameter("LastActivityDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Users_CreateUser", applicationIdParameter, userNameParameter, isUserAnonymousParameter, lastActivityDateParameter, userId);
        }
    
        public virtual int aspnet_Users_DeleteUser(string applicationName, string userName, Nullable<int> tablesToDeleteFrom, ObjectParameter numTablesDeletedFrom)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var tablesToDeleteFromParameter = tablesToDeleteFrom.HasValue ?
                new ObjectParameter("TablesToDeleteFrom", tablesToDeleteFrom) :
                new ObjectParameter("TablesToDeleteFrom", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Users_DeleteUser", applicationNameParameter, userNameParameter, tablesToDeleteFromParameter, numTablesDeletedFrom);
        }
    
        public virtual ObjectResult<string> aspnet_UsersInRoles_AddUsersToRoles(string applicationName, string userNames, string roleNames, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNamesParameter = userNames != null ?
                new ObjectParameter("UserNames", userNames) :
                new ObjectParameter("UserNames", typeof(string));
    
            var roleNamesParameter = roleNames != null ?
                new ObjectParameter("RoleNames", roleNames) :
                new ObjectParameter("RoleNames", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_AddUsersToRoles", applicationNameParameter, userNamesParameter, roleNamesParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<string> aspnet_UsersInRoles_FindUsersInRole(string applicationName, string roleName, string userNameToMatch)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var userNameToMatchParameter = userNameToMatch != null ?
                new ObjectParameter("UserNameToMatch", userNameToMatch) :
                new ObjectParameter("UserNameToMatch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_FindUsersInRole", applicationNameParameter, roleNameParameter, userNameToMatchParameter);
        }
    
        public virtual ObjectResult<string> aspnet_UsersInRoles_GetRolesForUser(string applicationName, string userName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_GetRolesForUser", applicationNameParameter, userNameParameter);
        }
    
        public virtual ObjectResult<string> aspnet_UsersInRoles_GetUsersInRoles(string applicationName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_GetUsersInRoles", applicationNameParameter, roleNameParameter);
        }
    
        public virtual int aspnet_UsersInRoles_IsUserInRole(string applicationName, string userName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_UsersInRoles_IsUserInRole", applicationNameParameter, userNameParameter, roleNameParameter);
        }
    
        public virtual ObjectResult<aspnet_UsersInRoles_RemoveUsersFromRoles_Result> aspnet_UsersInRoles_RemoveUsersFromRoles(string applicationName, string userNames, string roleNames)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNamesParameter = userNames != null ?
                new ObjectParameter("UserNames", userNames) :
                new ObjectParameter("UserNames", typeof(string));
    
            var roleNamesParameter = roleNames != null ?
                new ObjectParameter("RoleNames", roleNames) :
                new ObjectParameter("RoleNames", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_UsersInRoles_RemoveUsersFromRoles_Result>("aspnet_UsersInRoles_RemoveUsersFromRoles", applicationNameParameter, userNamesParameter, roleNamesParameter);
        }
    
        public virtual int aspnet_WebEvent_LogEvent(string eventId, Nullable<System.DateTime> eventTimeUtc, Nullable<System.DateTime> eventTime, string eventType, Nullable<decimal> eventSequence, Nullable<decimal> eventOccurrence, Nullable<int> eventCode, Nullable<int> eventDetailCode, string message, string applicationPath, string applicationVirtualPath, string machineName, string requestUrl, string exceptionType, string details)
        {
            var eventIdParameter = eventId != null ?
                new ObjectParameter("EventId", eventId) :
                new ObjectParameter("EventId", typeof(string));
    
            var eventTimeUtcParameter = eventTimeUtc.HasValue ?
                new ObjectParameter("EventTimeUtc", eventTimeUtc) :
                new ObjectParameter("EventTimeUtc", typeof(System.DateTime));
    
            var eventTimeParameter = eventTime.HasValue ?
                new ObjectParameter("EventTime", eventTime) :
                new ObjectParameter("EventTime", typeof(System.DateTime));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(string));
    
            var eventSequenceParameter = eventSequence.HasValue ?
                new ObjectParameter("EventSequence", eventSequence) :
                new ObjectParameter("EventSequence", typeof(decimal));
    
            var eventOccurrenceParameter = eventOccurrence.HasValue ?
                new ObjectParameter("EventOccurrence", eventOccurrence) :
                new ObjectParameter("EventOccurrence", typeof(decimal));
    
            var eventCodeParameter = eventCode.HasValue ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(int));
    
            var eventDetailCodeParameter = eventDetailCode.HasValue ?
                new ObjectParameter("EventDetailCode", eventDetailCode) :
                new ObjectParameter("EventDetailCode", typeof(int));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var applicationPathParameter = applicationPath != null ?
                new ObjectParameter("ApplicationPath", applicationPath) :
                new ObjectParameter("ApplicationPath", typeof(string));
    
            var applicationVirtualPathParameter = applicationVirtualPath != null ?
                new ObjectParameter("ApplicationVirtualPath", applicationVirtualPath) :
                new ObjectParameter("ApplicationVirtualPath", typeof(string));
    
            var machineNameParameter = machineName != null ?
                new ObjectParameter("MachineName", machineName) :
                new ObjectParameter("MachineName", typeof(string));
    
            var requestUrlParameter = requestUrl != null ?
                new ObjectParameter("RequestUrl", requestUrl) :
                new ObjectParameter("RequestUrl", typeof(string));
    
            var exceptionTypeParameter = exceptionType != null ?
                new ObjectParameter("ExceptionType", exceptionType) :
                new ObjectParameter("ExceptionType", typeof(string));
    
            var detailsParameter = details != null ?
                new ObjectParameter("Details", details) :
                new ObjectParameter("Details", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_WebEvent_LogEvent", eventIdParameter, eventTimeUtcParameter, eventTimeParameter, eventTypeParameter, eventSequenceParameter, eventOccurrenceParameter, eventCodeParameter, eventDetailCodeParameter, messageParameter, applicationPathParameter, applicationVirtualPathParameter, machineNameParameter, requestUrlParameter, exceptionTypeParameter, detailsParameter);
        }
    
        public virtual int CambioMasivoDeLiderAEmpleados(string personalIdAnterior, string personalIdNuevo, string codigoCampoAModificar)
        {
            var personalIdAnteriorParameter = personalIdAnterior != null ?
                new ObjectParameter("PersonalIdAnterior", personalIdAnterior) :
                new ObjectParameter("PersonalIdAnterior", typeof(string));
    
            var personalIdNuevoParameter = personalIdNuevo != null ?
                new ObjectParameter("PersonalIdNuevo", personalIdNuevo) :
                new ObjectParameter("PersonalIdNuevo", typeof(string));
    
            var codigoCampoAModificarParameter = codigoCampoAModificar != null ?
                new ObjectParameter("CodigoCampoAModificar", codigoCampoAModificar) :
                new ObjectParameter("CodigoCampoAModificar", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CambioMasivoDeLiderAEmpleados", personalIdAnteriorParameter, personalIdNuevoParameter, codigoCampoAModificarParameter);
        }
    
        public virtual int Desbloqueousuarios(string idusuario)
        {
            var idusuarioParameter = idusuario != null ?
                new ObjectParameter("idusuario", idusuario) :
                new ObjectParameter("idusuario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Desbloqueousuarios", idusuarioParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_CambioEstadoDiario()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CambioEstadoDiario");
        }
    
        public virtual int sp_CambioEstadoMensual()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CambioEstadoMensual");
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> sp_dias_habiles(Nullable<System.DateTime> fecha_desde, Nullable<System.DateTime> fecha_hasta, Nullable<int> numActividad, Nullable<long> areaId, Nullable<long> procesosId, Nullable<long> actividadId, Nullable<long> productoId, Nullable<long> productividad, Nullable<System.TimeSpan> tiempo, Nullable<System.DateTime> fechaProductiva, Nullable<int> tipoActividad, Nullable<int> tipoInactividadId, Nullable<int> inactividadId, Nullable<long> personaId, Nullable<System.DateTime> fechaRegistro, Nullable<int> estadoId)
        {
            var fecha_desdeParameter = fecha_desde.HasValue ?
                new ObjectParameter("fecha_desde", fecha_desde) :
                new ObjectParameter("fecha_desde", typeof(System.DateTime));
    
            var fecha_hastaParameter = fecha_hasta.HasValue ?
                new ObjectParameter("fecha_hasta", fecha_hasta) :
                new ObjectParameter("fecha_hasta", typeof(System.DateTime));
    
            var numActividadParameter = numActividad.HasValue ?
                new ObjectParameter("NumActividad", numActividad) :
                new ObjectParameter("NumActividad", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(long));
    
            var procesosIdParameter = procesosId.HasValue ?
                new ObjectParameter("ProcesosId", procesosId) :
                new ObjectParameter("ProcesosId", typeof(long));
    
            var actividadIdParameter = actividadId.HasValue ?
                new ObjectParameter("ActividadId", actividadId) :
                new ObjectParameter("ActividadId", typeof(long));
    
            var productoIdParameter = productoId.HasValue ?
                new ObjectParameter("ProductoId", productoId) :
                new ObjectParameter("ProductoId", typeof(long));
    
            var productividadParameter = productividad.HasValue ?
                new ObjectParameter("Productividad", productividad) :
                new ObjectParameter("Productividad", typeof(long));
    
            var tiempoParameter = tiempo.HasValue ?
                new ObjectParameter("Tiempo", tiempo) :
                new ObjectParameter("Tiempo", typeof(System.TimeSpan));
    
            var fechaProductivaParameter = fechaProductiva.HasValue ?
                new ObjectParameter("FechaProductiva", fechaProductiva) :
                new ObjectParameter("FechaProductiva", typeof(System.DateTime));
    
            var tipoActividadParameter = tipoActividad.HasValue ?
                new ObjectParameter("TipoActividad", tipoActividad) :
                new ObjectParameter("TipoActividad", typeof(int));
    
            var tipoInactividadIdParameter = tipoInactividadId.HasValue ?
                new ObjectParameter("TipoInactividadId", tipoInactividadId) :
                new ObjectParameter("TipoInactividadId", typeof(int));
    
            var inactividadIdParameter = inactividadId.HasValue ?
                new ObjectParameter("InactividadId", inactividadId) :
                new ObjectParameter("InactividadId", typeof(int));
    
            var personaIdParameter = personaId.HasValue ?
                new ObjectParameter("PersonaId", personaId) :
                new ObjectParameter("PersonaId", typeof(long));
    
            var fechaRegistroParameter = fechaRegistro.HasValue ?
                new ObjectParameter("FechaRegistro", fechaRegistro) :
                new ObjectParameter("FechaRegistro", typeof(System.DateTime));
    
            var estadoIdParameter = estadoId.HasValue ?
                new ObjectParameter("EstadoId", estadoId) :
                new ObjectParameter("EstadoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("sp_dias_habiles", fecha_desdeParameter, fecha_hastaParameter, numActividadParameter, areaIdParameter, procesosIdParameter, actividadIdParameter, productoIdParameter, productividadParameter, tiempoParameter, fechaProductivaParameter, tipoActividadParameter, tipoInactividadIdParameter, inactividadIdParameter, personaIdParameter, fechaRegistroParameter, estadoIdParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual ObjectResult<sp_SabanadeProduccion_Result> sp_SabanadeProduccion()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SabanadeProduccion_Result>("sp_SabanadeProduccion");
        }
    
        public virtual int sp_SabanadeProduccion1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SabanadeProduccion1");
        }
    
        public virtual int sp_SabanadeRH()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SabanadeRH");
        }
    
        public virtual int sp_SabanadeRH_1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SabanadeRH_1");
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int spActualizaInfoPrincipal(string nombreCompleto, Nullable<long> tipoDoc, string identificacion, Nullable<System.DateTime> fechaNacimiento, Nullable<long> genero, Nullable<long> cargoId, Nullable<long> personaId)
        {
            var nombreCompletoParameter = nombreCompleto != null ?
                new ObjectParameter("nombreCompleto", nombreCompleto) :
                new ObjectParameter("nombreCompleto", typeof(string));
    
            var tipoDocParameter = tipoDoc.HasValue ?
                new ObjectParameter("tipoDoc", tipoDoc) :
                new ObjectParameter("tipoDoc", typeof(long));
    
            var identificacionParameter = identificacion != null ?
                new ObjectParameter("identificacion", identificacion) :
                new ObjectParameter("identificacion", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("fechaNacimiento", fechaNacimiento) :
                new ObjectParameter("fechaNacimiento", typeof(System.DateTime));
    
            var generoParameter = genero.HasValue ?
                new ObjectParameter("genero", genero) :
                new ObjectParameter("genero", typeof(long));
    
            var cargoIdParameter = cargoId.HasValue ?
                new ObjectParameter("cargoId", cargoId) :
                new ObjectParameter("cargoId", typeof(long));
    
            var personaIdParameter = personaId.HasValue ?
                new ObjectParameter("PersonaId", personaId) :
                new ObjectParameter("PersonaId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spActualizaInfoPrincipal", nombreCompletoParameter, tipoDocParameter, identificacionParameter, fechaNacimientoParameter, generoParameter, cargoIdParameter, personaIdParameter);
        }
    
        public virtual int spActualizaMasivo(Nullable<int> campoID, string valor, Nullable<long> personaId, Nullable<int> nroCaptura, Nullable<System.Guid> userId)
        {
            var campoIDParameter = campoID.HasValue ?
                new ObjectParameter("campoID", campoID) :
                new ObjectParameter("campoID", typeof(int));
    
            var valorParameter = valor != null ?
                new ObjectParameter("valor", valor) :
                new ObjectParameter("valor", typeof(string));
    
            var personaIdParameter = personaId.HasValue ?
                new ObjectParameter("PersonaId", personaId) :
                new ObjectParameter("PersonaId", typeof(long));
    
            var nroCapturaParameter = nroCaptura.HasValue ?
                new ObjectParameter("nroCaptura", nroCaptura) :
                new ObjectParameter("nroCaptura", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spActualizaMasivo", campoIDParameter, valorParameter, personaIdParameter, nroCapturaParameter, userIdParameter);
        }
    
        public virtual int spActualizaRetiro(Nullable<int> personaId)
        {
            var personaIdParameter = personaId.HasValue ?
                new ObjectParameter("PersonaId", personaId) :
                new ObjectParameter("PersonaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spActualizaRetiro", personaIdParameter);
        }
    
        public virtual int spBuscarPersonal(string empresa, string fechaInicio, string fechafin, string area, string pSL, string pTL, string pSC, string nombre, string cedula)
        {
            var empresaParameter = empresa != null ?
                new ObjectParameter("empresa", empresa) :
                new ObjectParameter("empresa", typeof(string));
    
            var fechaInicioParameter = fechaInicio != null ?
                new ObjectParameter("fechaInicio", fechaInicio) :
                new ObjectParameter("fechaInicio", typeof(string));
    
            var fechafinParameter = fechafin != null ?
                new ObjectParameter("fechafin", fechafin) :
                new ObjectParameter("fechafin", typeof(string));
    
            var areaParameter = area != null ?
                new ObjectParameter("area", area) :
                new ObjectParameter("area", typeof(string));
    
            var pSLParameter = pSL != null ?
                new ObjectParameter("PSL", pSL) :
                new ObjectParameter("PSL", typeof(string));
    
            var pTLParameter = pTL != null ?
                new ObjectParameter("PTL", pTL) :
                new ObjectParameter("PTL", typeof(string));
    
            var pSCParameter = pSC != null ?
                new ObjectParameter("PSC", pSC) :
                new ObjectParameter("PSC", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spBuscarPersonal", empresaParameter, fechaInicioParameter, fechafinParameter, areaParameter, pSLParameter, pTLParameter, pSCParameter, nombreParameter, cedulaParameter);
        }
    
        public virtual int spCalcularHorasExtras()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCalcularHorasExtras");
        }
    
        public virtual ObjectResult<spCalcularHorasExtrasNv_Result> spCalcularHorasExtrasNv()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCalcularHorasExtrasNv_Result>("spCalcularHorasExtrasNv");
        }
    
        public virtual int spControlHorasExtras(Nullable<int> personaACargo, string fechaInico, string fechaFin)
        {
            var personaACargoParameter = personaACargo.HasValue ?
                new ObjectParameter("PersonaACargo", personaACargo) :
                new ObjectParameter("PersonaACargo", typeof(int));
    
            var fechaInicoParameter = fechaInico != null ?
                new ObjectParameter("FechaInico", fechaInico) :
                new ObjectParameter("FechaInico", typeof(string));
    
            var fechaFinParameter = fechaFin != null ?
                new ObjectParameter("FechaFin", fechaFin) :
                new ObjectParameter("FechaFin", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spControlHorasExtras", personaACargoParameter, fechaInicoParameter, fechaFinParameter);
        }
    
        public virtual int spDeshabilitarusuario(string idusuario)
        {
            var idusuarioParameter = idusuario != null ?
                new ObjectParameter("idusuario", idusuario) :
                new ObjectParameter("idusuario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeshabilitarusuario", idusuarioParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spEliminarActividadDiaria(Nullable<int> actividadDiariaId)
        {
            var actividadDiariaIdParameter = actividadDiariaId.HasValue ?
                new ObjectParameter("ActividadDiariaId", actividadDiariaId) :
                new ObjectParameter("ActividadDiariaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spEliminarActividadDiaria", actividadDiariaIdParameter);
        }
    
        public virtual int spInsertarActividadDiaria(Nullable<int> numActividad, Nullable<long> areaId, Nullable<long> procesosId, Nullable<long> actividadId, Nullable<long> productoId, Nullable<long> productividad, Nullable<System.TimeSpan> tiempo, Nullable<System.DateTime> fechaProductiva, Nullable<int> tipoActividad, Nullable<int> tipoInactividadId, Nullable<int> inactividadId, Nullable<long> personaId, Nullable<System.DateTime> fechaRegistro, Nullable<int> estadoId)
        {
            var numActividadParameter = numActividad.HasValue ?
                new ObjectParameter("NumActividad", numActividad) :
                new ObjectParameter("NumActividad", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(long));
    
            var procesosIdParameter = procesosId.HasValue ?
                new ObjectParameter("ProcesosId", procesosId) :
                new ObjectParameter("ProcesosId", typeof(long));
    
            var actividadIdParameter = actividadId.HasValue ?
                new ObjectParameter("ActividadId", actividadId) :
                new ObjectParameter("ActividadId", typeof(long));
    
            var productoIdParameter = productoId.HasValue ?
                new ObjectParameter("ProductoId", productoId) :
                new ObjectParameter("ProductoId", typeof(long));
    
            var productividadParameter = productividad.HasValue ?
                new ObjectParameter("Productividad", productividad) :
                new ObjectParameter("Productividad", typeof(long));
    
            var tiempoParameter = tiempo.HasValue ?
                new ObjectParameter("Tiempo", tiempo) :
                new ObjectParameter("Tiempo", typeof(System.TimeSpan));
    
            var fechaProductivaParameter = fechaProductiva.HasValue ?
                new ObjectParameter("FechaProductiva", fechaProductiva) :
                new ObjectParameter("FechaProductiva", typeof(System.DateTime));
    
            var tipoActividadParameter = tipoActividad.HasValue ?
                new ObjectParameter("TipoActividad", tipoActividad) :
                new ObjectParameter("TipoActividad", typeof(int));
    
            var tipoInactividadIdParameter = tipoInactividadId.HasValue ?
                new ObjectParameter("TipoInactividadId", tipoInactividadId) :
                new ObjectParameter("TipoInactividadId", typeof(int));
    
            var inactividadIdParameter = inactividadId.HasValue ?
                new ObjectParameter("InactividadId", inactividadId) :
                new ObjectParameter("InactividadId", typeof(int));
    
            var personaIdParameter = personaId.HasValue ?
                new ObjectParameter("PersonaId", personaId) :
                new ObjectParameter("PersonaId", typeof(long));
    
            var fechaRegistroParameter = fechaRegistro.HasValue ?
                new ObjectParameter("FechaRegistro", fechaRegistro) :
                new ObjectParameter("FechaRegistro", typeof(System.DateTime));
    
            var estadoIdParameter = estadoId.HasValue ?
                new ObjectParameter("EstadoId", estadoId) :
                new ObjectParameter("EstadoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertarActividadDiaria", numActividadParameter, areaIdParameter, procesosIdParameter, actividadIdParameter, productoIdParameter, productividadParameter, tiempoParameter, fechaProductivaParameter, tipoActividadParameter, tipoInactividadIdParameter, inactividadIdParameter, personaIdParameter, fechaRegistroParameter, estadoIdParameter);
        }
    
        public virtual int spInsertarProgramacionLaboral(Nullable<long> personaId, Nullable<System.DateTime> fechaTurno, Nullable<System.TimeSpan> horaInicio, Nullable<System.TimeSpan> horaFin, Nullable<long> personaIdRegistro, Nullable<System.DateTime> fechaRegistro, Nullable<int> turnoId, Nullable<bool> activo)
        {
            var personaIdParameter = personaId.HasValue ?
                new ObjectParameter("PersonaId", personaId) :
                new ObjectParameter("PersonaId", typeof(long));
    
            var fechaTurnoParameter = fechaTurno.HasValue ?
                new ObjectParameter("FechaTurno", fechaTurno) :
                new ObjectParameter("FechaTurno", typeof(System.DateTime));
    
            var horaInicioParameter = horaInicio.HasValue ?
                new ObjectParameter("HoraInicio", horaInicio) :
                new ObjectParameter("HoraInicio", typeof(System.TimeSpan));
    
            var horaFinParameter = horaFin.HasValue ?
                new ObjectParameter("HoraFin", horaFin) :
                new ObjectParameter("HoraFin", typeof(System.TimeSpan));
    
            var personaIdRegistroParameter = personaIdRegistro.HasValue ?
                new ObjectParameter("PersonaIdRegistro", personaIdRegistro) :
                new ObjectParameter("PersonaIdRegistro", typeof(long));
    
            var fechaRegistroParameter = fechaRegistro.HasValue ?
                new ObjectParameter("FechaRegistro", fechaRegistro) :
                new ObjectParameter("FechaRegistro", typeof(System.DateTime));
    
            var turnoIdParameter = turnoId.HasValue ?
                new ObjectParameter("TurnoId", turnoId) :
                new ObjectParameter("TurnoId", typeof(int));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertarProgramacionLaboral", personaIdParameter, fechaTurnoParameter, horaInicioParameter, horaFinParameter, personaIdRegistroParameter, fechaRegistroParameter, turnoIdParameter, activoParameter);
        }
    
        public virtual int spInsertExtrasAprobadas(string fechaTurno, Nullable<long> personaId, Nullable<System.TimeSpan> extrasAprobadas, Nullable<bool> aprobarExtras, Nullable<System.DateTime> fechaAprobadas, Nullable<long> perosonaIdAprobador)
        {
            var fechaTurnoParameter = fechaTurno != null ?
                new ObjectParameter("FechaTurno", fechaTurno) :
                new ObjectParameter("FechaTurno", typeof(string));
    
            var personaIdParameter = personaId.HasValue ?
                new ObjectParameter("PersonaId", personaId) :
                new ObjectParameter("PersonaId", typeof(long));
    
            var extrasAprobadasParameter = extrasAprobadas.HasValue ?
                new ObjectParameter("ExtrasAprobadas", extrasAprobadas) :
                new ObjectParameter("ExtrasAprobadas", typeof(System.TimeSpan));
    
            var aprobarExtrasParameter = aprobarExtras.HasValue ?
                new ObjectParameter("AprobarExtras", aprobarExtras) :
                new ObjectParameter("AprobarExtras", typeof(bool));
    
            var fechaAprobadasParameter = fechaAprobadas.HasValue ?
                new ObjectParameter("FechaAprobadas", fechaAprobadas) :
                new ObjectParameter("FechaAprobadas", typeof(System.DateTime));
    
            var perosonaIdAprobadorParameter = perosonaIdAprobador.HasValue ?
                new ObjectParameter("PerosonaIdAprobador", perosonaIdAprobador) :
                new ObjectParameter("PerosonaIdAprobador", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertExtrasAprobadas", fechaTurnoParameter, personaIdParameter, extrasAprobadasParameter, aprobarExtrasParameter, fechaAprobadasParameter, perosonaIdAprobadorParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spLiderInsertaInactividad(Nullable<System.DateTime> fecha_desde, Nullable<System.DateTime> fecha_hasta, Nullable<int> numActividad, Nullable<long> areaId, Nullable<long> procesosId, Nullable<long> actividadId, Nullable<long> productoId, Nullable<long> productividad, Nullable<System.TimeSpan> tiempo, Nullable<System.DateTime> fechaProductiva, Nullable<int> tipoActividad, Nullable<int> tipoInactividadId, Nullable<int> inactividadId, Nullable<long> personaId, Nullable<System.DateTime> fechaRegistro, Nullable<int> estadoId)
        {
            var fecha_desdeParameter = fecha_desde.HasValue ?
                new ObjectParameter("fecha_desde", fecha_desde) :
                new ObjectParameter("fecha_desde", typeof(System.DateTime));
    
            var fecha_hastaParameter = fecha_hasta.HasValue ?
                new ObjectParameter("fecha_hasta", fecha_hasta) :
                new ObjectParameter("fecha_hasta", typeof(System.DateTime));
    
            var numActividadParameter = numActividad.HasValue ?
                new ObjectParameter("NumActividad", numActividad) :
                new ObjectParameter("NumActividad", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(long));
    
            var procesosIdParameter = procesosId.HasValue ?
                new ObjectParameter("ProcesosId", procesosId) :
                new ObjectParameter("ProcesosId", typeof(long));
    
            var actividadIdParameter = actividadId.HasValue ?
                new ObjectParameter("ActividadId", actividadId) :
                new ObjectParameter("ActividadId", typeof(long));
    
            var productoIdParameter = productoId.HasValue ?
                new ObjectParameter("ProductoId", productoId) :
                new ObjectParameter("ProductoId", typeof(long));
    
            var productividadParameter = productividad.HasValue ?
                new ObjectParameter("Productividad", productividad) :
                new ObjectParameter("Productividad", typeof(long));
    
            var tiempoParameter = tiempo.HasValue ?
                new ObjectParameter("Tiempo", tiempo) :
                new ObjectParameter("Tiempo", typeof(System.TimeSpan));
    
            var fechaProductivaParameter = fechaProductiva.HasValue ?
                new ObjectParameter("FechaProductiva", fechaProductiva) :
                new ObjectParameter("FechaProductiva", typeof(System.DateTime));
    
            var tipoActividadParameter = tipoActividad.HasValue ?
                new ObjectParameter("TipoActividad", tipoActividad) :
                new ObjectParameter("TipoActividad", typeof(int));
    
            var tipoInactividadIdParameter = tipoInactividadId.HasValue ?
                new ObjectParameter("TipoInactividadId", tipoInactividadId) :
                new ObjectParameter("TipoInactividadId", typeof(int));
    
            var inactividadIdParameter = inactividadId.HasValue ?
                new ObjectParameter("InactividadId", inactividadId) :
                new ObjectParameter("InactividadId", typeof(int));
    
            var personaIdParameter = personaId.HasValue ?
                new ObjectParameter("PersonaId", personaId) :
                new ObjectParameter("PersonaId", typeof(long));
    
            var fechaRegistroParameter = fechaRegistro.HasValue ?
                new ObjectParameter("FechaRegistro", fechaRegistro) :
                new ObjectParameter("FechaRegistro", typeof(System.DateTime));
    
            var estadoIdParameter = estadoId.HasValue ?
                new ObjectParameter("EstadoId", estadoId) :
                new ObjectParameter("EstadoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spLiderInsertaInactividad", fecha_desdeParameter, fecha_hastaParameter, numActividadParameter, areaIdParameter, procesosIdParameter, actividadIdParameter, productoIdParameter, productividadParameter, tiempoParameter, fechaProductivaParameter, tipoActividadParameter, tipoInactividadIdParameter, inactividadIdParameter, personaIdParameter, fechaRegistroParameter, estadoIdParameter);
        }
    
        public virtual int spLoginUsuarios()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spLoginUsuarios");
        }
    
        public virtual ObjectResult<spObtenerActividadesDiariasPorUsDesHast_Result> spObtenerActividadesDiariasPorUsDesHast(Nullable<long> personaId, string fechaProduccionDesde, string fechaProduccionhasta)
        {
            var personaIdParameter = personaId.HasValue ?
                new ObjectParameter("PersonaId", personaId) :
                new ObjectParameter("PersonaId", typeof(long));
    
            var fechaProduccionDesdeParameter = fechaProduccionDesde != null ?
                new ObjectParameter("fechaProduccionDesde", fechaProduccionDesde) :
                new ObjectParameter("fechaProduccionDesde", typeof(string));
    
            var fechaProduccionhastaParameter = fechaProduccionhasta != null ?
                new ObjectParameter("fechaProduccionhasta", fechaProduccionhasta) :
                new ObjectParameter("fechaProduccionhasta", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerActividadesDiariasPorUsDesHast_Result>("spObtenerActividadesDiariasPorUsDesHast", personaIdParameter, fechaProduccionDesdeParameter, fechaProduccionhastaParameter);
        }
    
        public virtual ObjectResult<spObtenerActividadesDiariasPorUsuario_Result> spObtenerActividadesDiariasPorUsuario(Nullable<long> personaId, Nullable<System.DateTime> fechaProduccion)
        {
            var personaIdParameter = personaId.HasValue ?
                new ObjectParameter("PersonaId", personaId) :
                new ObjectParameter("PersonaId", typeof(long));
    
            var fechaProduccionParameter = fechaProduccion.HasValue ?
                new ObjectParameter("fechaProduccion", fechaProduccion) :
                new ObjectParameter("fechaProduccion", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerActividadesDiariasPorUsuario_Result>("spObtenerActividadesDiariasPorUsuario", personaIdParameter, fechaProduccionParameter);
        }
    
        public virtual ObjectResult<spObtenerCamposFormulario_Result> spObtenerCamposFormulario(Nullable<long> formularioId)
        {
            var formularioIdParameter = formularioId.HasValue ?
                new ObjectParameter("FormularioId", formularioId) :
                new ObjectParameter("FormularioId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerCamposFormulario_Result>("spObtenerCamposFormulario", formularioIdParameter);
        }
    
        public virtual ObjectResult<spObtenerCapturaEventos_Result> spObtenerCapturaEventos(Nullable<int> personaId, Nullable<int> barraEventoId, string fechaRegistro)
        {
            var personaIdParameter = personaId.HasValue ?
                new ObjectParameter("PersonaId", personaId) :
                new ObjectParameter("PersonaId", typeof(int));
    
            var barraEventoIdParameter = barraEventoId.HasValue ?
                new ObjectParameter("BarraEventoId", barraEventoId) :
                new ObjectParameter("BarraEventoId", typeof(int));
    
            var fechaRegistroParameter = fechaRegistro != null ?
                new ObjectParameter("FechaRegistro", fechaRegistro) :
                new ObjectParameter("FechaRegistro", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerCapturaEventos_Result>("spObtenerCapturaEventos", personaIdParameter, barraEventoIdParameter, fechaRegistroParameter);
        }
    
        public virtual ObjectResult<spObtenerClientes_Result> spObtenerClientes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerClientes_Result>("spObtenerClientes");
        }
    
        public virtual ObjectResult<spObtenerClientesRoles_Result> spObtenerClientesRoles(Nullable<long> cliente, Nullable<System.Guid> roleId)
        {
            var clienteParameter = cliente.HasValue ?
                new ObjectParameter("cliente", cliente) :
                new ObjectParameter("cliente", typeof(long));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerClientesRoles_Result>("spObtenerClientesRoles", clienteParameter, roleIdParameter);
        }
    
        public virtual ObjectResult<spObtenerDatosPersonal_Result> spObtenerDatosPersonal(Nullable<int> personaId)
        {
            var personaIdParameter = personaId.HasValue ?
                new ObjectParameter("personaId", personaId) :
                new ObjectParameter("personaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerDatosPersonal_Result>("spObtenerDatosPersonal", personaIdParameter);
        }
    
        public virtual ObjectResult<spObtenerEstructuras_Result> spObtenerEstructuras(Nullable<int> padre, Nullable<int> cliente, Nullable<bool> edita)
        {
            var padreParameter = padre.HasValue ?
                new ObjectParameter("padre", padre) :
                new ObjectParameter("padre", typeof(int));
    
            var clienteParameter = cliente.HasValue ?
                new ObjectParameter("cliente", cliente) :
                new ObjectParameter("cliente", typeof(int));
    
            var editaParameter = edita.HasValue ?
                new ObjectParameter("edita", edita) :
                new ObjectParameter("edita", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerEstructuras_Result>("spObtenerEstructuras", padreParameter, clienteParameter, editaParameter);
        }
    
        public virtual ObjectResult<spObtenerHorasExtras_Result> spObtenerHorasExtras(string fechaInico, string fechaFin, Nullable<int> personaACargo)
        {
            var fechaInicoParameter = fechaInico != null ?
                new ObjectParameter("FechaInico", fechaInico) :
                new ObjectParameter("FechaInico", typeof(string));
    
            var fechaFinParameter = fechaFin != null ?
                new ObjectParameter("FechaFin", fechaFin) :
                new ObjectParameter("FechaFin", typeof(string));
    
            var personaACargoParameter = personaACargo.HasValue ?
                new ObjectParameter("PersonaACargo", personaACargo) :
                new ObjectParameter("PersonaACargo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerHorasExtras_Result>("spObtenerHorasExtras", fechaInicoParameter, fechaFinParameter, personaACargoParameter);
        }
    
        public virtual ObjectResult<spObtenerInactividadesPorActividad_Result> spObtenerInactividadesPorActividad(Nullable<int> numActividad)
        {
            var numActividadParameter = numActividad.HasValue ?
                new ObjectParameter("numActividad", numActividad) :
                new ObjectParameter("numActividad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerInactividadesPorActividad_Result>("spObtenerInactividadesPorActividad", numActividadParameter);
        }
    
        public virtual ObjectResult<spObtenerItemsListaCampos_Result> spObtenerItemsListaCampos(Nullable<long> campoId)
        {
            var campoIdParameter = campoId.HasValue ?
                new ObjectParameter("CampoId", campoId) :
                new ObjectParameter("CampoId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerItemsListaCampos_Result>("spObtenerItemsListaCampos", campoIdParameter);
        }
    
        public virtual ObjectResult<spObtenerItemsListaCamposCascada_Result> spObtenerItemsListaCamposCascada(Nullable<long> campoId, Nullable<long> padreId)
        {
            var campoIdParameter = campoId.HasValue ?
                new ObjectParameter("CampoId", campoId) :
                new ObjectParameter("CampoId", typeof(long));
    
            var padreIdParameter = padreId.HasValue ?
                new ObjectParameter("PadreId", padreId) :
                new ObjectParameter("PadreId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerItemsListaCamposCascada_Result>("spObtenerItemsListaCamposCascada", campoIdParameter, padreIdParameter);
        }
    
        public virtual int spObtenerMenuHijos(Nullable<int> idPadre, Nullable<System.Guid> usuario)
        {
            var idPadreParameter = idPadre.HasValue ?
                new ObjectParameter("IdPadre", idPadre) :
                new ObjectParameter("IdPadre", typeof(int));
    
            var usuarioParameter = usuario.HasValue ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spObtenerMenuHijos", idPadreParameter, usuarioParameter);
        }
    
        public virtual int spObtenerMenuPadre(Nullable<System.Guid> usuario)
        {
            var usuarioParameter = usuario.HasValue ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spObtenerMenuPadre", usuarioParameter);
        }
    
        public virtual ObjectResult<spObtenerPersonasCargoEVERIS_Result> spObtenerPersonasCargoEVERIS(string valorItemLista)
        {
            var valorItemListaParameter = valorItemLista != null ?
                new ObjectParameter("valorItemLista", valorItemLista) :
                new ObjectParameter("valorItemLista", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerPersonasCargoEVERIS_Result>("spObtenerPersonasCargoEVERIS", valorItemListaParameter);
        }
    
        public virtual int spObtenerPersonasPorLider(string pSC, string cedula)
        {
            var pSCParameter = pSC != null ?
                new ObjectParameter("PSC", pSC) :
                new ObjectParameter("PSC", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spObtenerPersonasPorLider", pSCParameter, cedulaParameter);
        }
    
        public virtual ObjectResult<spObtenerPersonIdPorUserId_Result> spObtenerPersonIdPorUserId(Nullable<System.Guid> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerPersonIdPorUserId_Result>("spObtenerPersonIdPorUserId", userIdParameter);
        }
    
        public virtual int spObtenerProgramcionLaboralPorFecha(string fechaInico, string fechaFin, Nullable<long> personaACargo)
        {
            var fechaInicoParameter = fechaInico != null ?
                new ObjectParameter("FechaInico", fechaInico) :
                new ObjectParameter("FechaInico", typeof(string));
    
            var fechaFinParameter = fechaFin != null ?
                new ObjectParameter("FechaFin", fechaFin) :
                new ObjectParameter("FechaFin", typeof(string));
    
            var personaACargoParameter = personaACargo.HasValue ?
                new ObjectParameter("PersonaACargo", personaACargo) :
                new ObjectParameter("PersonaACargo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spObtenerProgramcionLaboralPorFecha", fechaInicoParameter, fechaFinParameter, personaACargoParameter);
        }
    
        public virtual ObjectResult<spObtenerProgramcionLaboralPorFecha1_Result> spObtenerProgramcionLaboralPorFecha1(string fechaInico, string fechaFin, Nullable<long> personaACargo)
        {
            var fechaInicoParameter = fechaInico != null ?
                new ObjectParameter("FechaInico", fechaInico) :
                new ObjectParameter("FechaInico", typeof(string));
    
            var fechaFinParameter = fechaFin != null ?
                new ObjectParameter("FechaFin", fechaFin) :
                new ObjectParameter("FechaFin", typeof(string));
    
            var personaACargoParameter = personaACargo.HasValue ?
                new ObjectParameter("PersonaACargo", personaACargo) :
                new ObjectParameter("PersonaACargo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerProgramcionLaboralPorFecha1_Result>("spObtenerProgramcionLaboralPorFecha1", fechaInicoParameter, fechaFinParameter, personaACargoParameter);
        }
    
        public virtual ObjectResult<spObtenerProgramLaboralActualUser_Result> spObtenerProgramLaboralActualUser(Nullable<long> personaId, Nullable<System.DateTime> fechaTurno)
        {
            var personaIdParameter = personaId.HasValue ?
                new ObjectParameter("PersonaId", personaId) :
                new ObjectParameter("PersonaId", typeof(long));
    
            var fechaTurnoParameter = fechaTurno.HasValue ?
                new ObjectParameter("FechaTurno", fechaTurno) :
                new ObjectParameter("FechaTurno", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerProgramLaboralActualUser_Result>("spObtenerProgramLaboralActualUser", personaIdParameter, fechaTurnoParameter);
        }
    
        public virtual ObjectResult<Nullable<System.Guid>> spObtenerRolUser(Nullable<System.Guid> idUser)
        {
            var idUserParameter = idUser.HasValue ?
                new ObjectParameter("idUser", idUser) :
                new ObjectParameter("idUser", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.Guid>>("spObtenerRolUser", idUserParameter);
        }
    
        public virtual ObjectResult<spObtenerUserId_Result> spObtenerUserId(string nameUser)
        {
            var nameUserParameter = nameUser != null ?
                new ObjectParameter("nameUser", nameUser) :
                new ObjectParameter("nameUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerUserId_Result>("spObtenerUserId", nameUserParameter);
        }
    
        public virtual ObjectResult<spObtieneProgramacionLabralPorDia_Result> spObtieneProgramacionLabralPorDia(string personaId, string fechaTurno)
        {
            var personaIdParameter = personaId != null ?
                new ObjectParameter("PersonaId", personaId) :
                new ObjectParameter("PersonaId", typeof(string));
    
            var fechaTurnoParameter = fechaTurno != null ?
                new ObjectParameter("FechaTurno", fechaTurno) :
                new ObjectParameter("FechaTurno", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtieneProgramacionLabralPorDia_Result>("spObtieneProgramacionLabralPorDia", personaIdParameter, fechaTurnoParameter);
        }
    
        public virtual ObjectResult<spOptenerBarraEventos_Result> spOptenerBarraEventos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spOptenerBarraEventos_Result>("spOptenerBarraEventos");
        }
    
        public virtual ObjectResult<spReporteEntradaySalida_Result> spReporteEntradaySalida()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReporteEntradaySalida_Result>("spReporteEntradaySalida");
        }
    
        public virtual ObjectResult<spReporteEntradaySalida1_Result> spReporteEntradaySalida1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReporteEntradaySalida1_Result>("spReporteEntradaySalida1");
        }
    
        public virtual ObjectResult<spReporteHorasExtrasConsolidado_Result> spReporteHorasExtrasConsolidado()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReporteHorasExtrasConsolidado_Result>("spReporteHorasExtrasConsolidado");
        }
    
        public virtual ObjectResult<spReporteHorasExtrasPorLider_Result> spReporteHorasExtrasPorLider(string personalIdACargo, string fechaIni, string fechaFin)
        {
            var personalIdACargoParameter = personalIdACargo != null ?
                new ObjectParameter("PersonalIdACargo", personalIdACargo) :
                new ObjectParameter("PersonalIdACargo", typeof(string));
    
            var fechaIniParameter = fechaIni != null ?
                new ObjectParameter("FechaIni", fechaIni) :
                new ObjectParameter("FechaIni", typeof(string));
    
            var fechaFinParameter = fechaFin != null ?
                new ObjectParameter("fechaFin", fechaFin) :
                new ObjectParameter("fechaFin", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReporteHorasExtrasPorLider_Result>("spReporteHorasExtrasPorLider", personalIdACargoParameter, fechaIniParameter, fechaFinParameter);
        }
    
        public virtual ObjectResult<spTiempoTotalActividadDiariaPorPersona_Result> spTiempoTotalActividadDiariaPorPersona(string fechaProductiva, Nullable<long> personaId)
        {
            var fechaProductivaParameter = fechaProductiva != null ?
                new ObjectParameter("fechaProductiva", fechaProductiva) :
                new ObjectParameter("fechaProductiva", typeof(string));
    
            var personaIdParameter = personaId.HasValue ?
                new ObjectParameter("PersonaId", personaId) :
                new ObjectParameter("PersonaId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTiempoTotalActividadDiariaPorPersona_Result>("spTiempoTotalActividadDiariaPorPersona", fechaProductivaParameter, personaIdParameter);
        }
    
        public virtual int spUpdateCapturaBarraEvento(string fechaRegistro, Nullable<long> personaId, Nullable<int> eventoBarraId, Nullable<int> tipoEditar, string fechaRegistroNueva, Nullable<bool> activo)
        {
            var fechaRegistroParameter = fechaRegistro != null ?
                new ObjectParameter("fechaRegistro", fechaRegistro) :
                new ObjectParameter("fechaRegistro", typeof(string));
    
            var personaIdParameter = personaId.HasValue ?
                new ObjectParameter("personaId", personaId) :
                new ObjectParameter("personaId", typeof(long));
    
            var eventoBarraIdParameter = eventoBarraId.HasValue ?
                new ObjectParameter("eventoBarraId", eventoBarraId) :
                new ObjectParameter("eventoBarraId", typeof(int));
    
            var tipoEditarParameter = tipoEditar.HasValue ?
                new ObjectParameter("tipoEditar", tipoEditar) :
                new ObjectParameter("tipoEditar", typeof(int));
    
            var fechaRegistroNuevaParameter = fechaRegistroNueva != null ?
                new ObjectParameter("fechaRegistroNueva", fechaRegistroNueva) :
                new ObjectParameter("fechaRegistroNueva", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateCapturaBarraEvento", fechaRegistroParameter, personaIdParameter, eventoBarraIdParameter, tipoEditarParameter, fechaRegistroNuevaParameter, activoParameter);
        }
    
        public virtual ObjectResult<spValidaExisPers_Result> spValidaExisPers(string identificacionID)
        {
            var identificacionIDParameter = identificacionID != null ?
                new ObjectParameter("identificacionID", identificacionID) :
                new ObjectParameter("identificacionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spValidaExisPers_Result>("spValidaExisPers", identificacionIDParameter);
        }
    
        public virtual int UsersInRoles_AddUserToRole(Nullable<System.Guid> userId, Nullable<System.Guid> roleId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UsersInRoles_AddUserToRole", userIdParameter, roleIdParameter);
        }
    
        public virtual int spActualizaEstadoSabanaProduccion(Nullable<bool> procesado)
        {
            var procesadoParameter = procesado.HasValue ?
                new ObjectParameter("procesado", procesado) :
                new ObjectParameter("procesado", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spActualizaEstadoSabanaProduccion", procesadoParameter);
        }
    
        public virtual ObjectResult<string> spObtenerNombreLider(string idLider)
        {
            var idLiderParameter = idLider != null ?
                new ObjectParameter("idLider", idLider) :
                new ObjectParameter("idLider", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spObtenerNombreLider", idLiderParameter);
        }
    
        public virtual ObjectResult<spObtenerPersonasPorLiderSGD_Result> spObtenerPersonasPorLiderSGD(string cedula, Nullable<int> idProceso)
        {
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var idProcesoParameter = idProceso.HasValue ?
                new ObjectParameter("idProceso", idProceso) :
                new ObjectParameter("idProceso", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerPersonasPorLiderSGD_Result>("spObtenerPersonasPorLiderSGD", cedulaParameter, idProcesoParameter);
        }
    
        public virtual int Desbloqueomasivousuarios()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Desbloqueomasivousuarios");
        }
    
        public virtual int Desbloqueousuarios1(string idusuario)
        {
            var idusuarioParameter = idusuario != null ?
                new ObjectParameter("idusuario", idusuario) :
                new ObjectParameter("idusuario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Desbloqueousuarios1", idusuarioParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> sp_dias_habiles1(Nullable<System.DateTime> fecha_desde, Nullable<System.DateTime> fecha_hasta, Nullable<int> numActividad, Nullable<long> areaId, Nullable<long> procesosId, Nullable<long> actividadId, Nullable<long> productoId, Nullable<long> productividad, Nullable<System.TimeSpan> tiempo, Nullable<System.DateTime> fechaProductiva, Nullable<int> tipoActividad, Nullable<int> tipoInactividadId, Nullable<int> inactividadId, Nullable<long> personaId, Nullable<System.DateTime> fechaRegistro, Nullable<int> estadoId)
        {
            var fecha_desdeParameter = fecha_desde.HasValue ?
                new ObjectParameter("fecha_desde", fecha_desde) :
                new ObjectParameter("fecha_desde", typeof(System.DateTime));
    
            var fecha_hastaParameter = fecha_hasta.HasValue ?
                new ObjectParameter("fecha_hasta", fecha_hasta) :
                new ObjectParameter("fecha_hasta", typeof(System.DateTime));
    
            var numActividadParameter = numActividad.HasValue ?
                new ObjectParameter("NumActividad", numActividad) :
                new ObjectParameter("NumActividad", typeof(int));
    
            var areaIdParameter = areaId.HasValue ?
                new ObjectParameter("AreaId", areaId) :
                new ObjectParameter("AreaId", typeof(long));
    
            var procesosIdParameter = procesosId.HasValue ?
                new ObjectParameter("ProcesosId", procesosId) :
                new ObjectParameter("ProcesosId", typeof(long));
    
            var actividadIdParameter = actividadId.HasValue ?
                new ObjectParameter("ActividadId", actividadId) :
                new ObjectParameter("ActividadId", typeof(long));
    
            var productoIdParameter = productoId.HasValue ?
                new ObjectParameter("ProductoId", productoId) :
                new ObjectParameter("ProductoId", typeof(long));
    
            var productividadParameter = productividad.HasValue ?
                new ObjectParameter("Productividad", productividad) :
                new ObjectParameter("Productividad", typeof(long));
    
            var tiempoParameter = tiempo.HasValue ?
                new ObjectParameter("Tiempo", tiempo) :
                new ObjectParameter("Tiempo", typeof(System.TimeSpan));
    
            var fechaProductivaParameter = fechaProductiva.HasValue ?
                new ObjectParameter("FechaProductiva", fechaProductiva) :
                new ObjectParameter("FechaProductiva", typeof(System.DateTime));
    
            var tipoActividadParameter = tipoActividad.HasValue ?
                new ObjectParameter("TipoActividad", tipoActividad) :
                new ObjectParameter("TipoActividad", typeof(int));
    
            var tipoInactividadIdParameter = tipoInactividadId.HasValue ?
                new ObjectParameter("TipoInactividadId", tipoInactividadId) :
                new ObjectParameter("TipoInactividadId", typeof(int));
    
            var inactividadIdParameter = inactividadId.HasValue ?
                new ObjectParameter("InactividadId", inactividadId) :
                new ObjectParameter("InactividadId", typeof(int));
    
            var personaIdParameter = personaId.HasValue ?
                new ObjectParameter("PersonaId", personaId) :
                new ObjectParameter("PersonaId", typeof(long));
    
            var fechaRegistroParameter = fechaRegistro.HasValue ?
                new ObjectParameter("FechaRegistro", fechaRegistro) :
                new ObjectParameter("FechaRegistro", typeof(System.DateTime));
    
            var estadoIdParameter = estadoId.HasValue ?
                new ObjectParameter("EstadoId", estadoId) :
                new ObjectParameter("EstadoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("sp_dias_habiles1", fecha_desdeParameter, fecha_hastaParameter, numActividadParameter, areaIdParameter, procesosIdParameter, actividadIdParameter, productoIdParameter, productividadParameter, tiempoParameter, fechaProductivaParameter, tipoActividadParameter, tipoInactividadIdParameter, inactividadIdParameter, personaIdParameter, fechaRegistroParameter, estadoIdParameter);
        }
    
        public virtual int spDeshabilitarusuario1(string idusuario)
        {
            var idusuarioParameter = idusuario != null ?
                new ObjectParameter("idusuario", idusuario) :
                new ObjectParameter("idusuario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeshabilitarusuario1", idusuarioParameter);
        }
    }
}
